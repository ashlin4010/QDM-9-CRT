#ifndef __AVR_ATmega328P__
#define __AVR_ATmega328P__
#endif

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#include "NopConstants.h"
#include "NopDelay.h"

#define MY_CONSTANT "Hello"  // Example constant

const int VSYNC_ROWS = 10; // The number of rows to keep the pulse on
const int SCREEN_END = 306;
const uint8_t TEXT_ROW_START = 1;
const uint8_t TEXT_ROW_END = 30;
const uint8_t TEXT_COLUMNS = 20;
const uint8_t TEXT_ROWS = 28;
const uint8_t bitMask = (1 << PB4);  // Bit mask for the pin

volatile uint8_t int_time = 0x00;

int row = 0;
volatile bool run = true;
uint8_t font_row = 0;
uint8_t character_row = 0;


unsigned char memory[28][30] = {
  {96 + 32,'A','A',96 + 32,96 + 32,' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','B','B',96 + 32,96 + 32,' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','C','C',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','D','D',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','E','E',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','F','F',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','G','G',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','H','H',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','I','I',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','J','J',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','K','K',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','L','L',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','M','M',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','N','N',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','O','O',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','P','P',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','Q','Q',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','R','R',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','S','S',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','T','T',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','Y','Y',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','V','V',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','W','W',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','X','X',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','Y','Y',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','Z','Z',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'|','!','!',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ',' ',' ','|','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
  {'#',126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,'#','|','8','9', '0','1','2','3','4','5','6','7','8','9'},
};

const unsigned char FONT[97][10] = {
{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x30,0x78,0x78,0x30,0x30,0x00,0x30 },{ 0x00,0x00,0x00,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C },{ 0x00,0x00,0x00,0x30,0x7C,0xC0,0x78,0x0C,0xF8,0x30 },{ 0x00,0x00,0x00,0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6 },{ 0x00,0x00,0x00,0x38,0x6C,0x38,0x76,0xDC,0xCC,0x76 },{ 0x00,0x00,0x00,0x60,0x60,0xC0,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x18,0x30,0x60,0x60,0x60,0x30,0x18 },{ 0x00,0x00,0x00,0x60,0x30,0x18,0x18,0x18,0x30,0x60 },{ 0x00,0x00,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00 },{ 0x00,0x00,0x00,0x00,0x30,0x30,0xFC,0x30,0x30,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30 },{ 0x00,0x00,0x00,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80 },{ 0x00,0x00,0x00,0x7C,0xC6,0xCE,0xDE,0xF6,0xE6,0x7C },{ 0x00,0x00,0x00,0x30,0x70,0x30,0x30,0x30,0x30,0xFC },{ 0x00,0x00,0x00,0x78,0xCC,0x0C,0x38,0x60,0xC4,0xFC },{ 0x00,0x00,0x00,0x78,0xCC,0x0C,0x38,0x0C,0xCC,0x78 },{ 0x00,0x00,0x00,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x1E },{ 0x00,0x00,0x00,0xFC,0xC0,0xF8,0x0C,0x0C,0xCC,0x78 },{ 0x00,0x00,0x00,0x38,0x60,0xC0,0xF8,0xCC,0xCC,0x78 },{ 0x00,0x00,0x00,0xFC,0xCC,0x0C,0x18,0x30,0x30,0x30 },{ 0x00,0x00,0x00,0x78,0xCC,0xCC,0x78,0xCC,0xCC,0x78 },{ 0x00,0x00,0x00,0x78,0xCC,0xCC,0x7C,0x0C,0x18,0x70 },{ 0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x30,0x30 },{ 0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x60 },{ 0x00,0x00,0x00,0x18,0x30,0x60,0xC0,0x60,0x30,0x18 },{ 0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0xFC,0x00 },{ 0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x18,0x30,0x60 },{ 0x00,0x00,0x00,0x78,0xCC,0x0C,0x18,0x30,0x00,0x30 },{ 0x00,0x00,0x00,0x7C,0xC6,0xDE,0xDE,0xDE,0xC0,0x78 },{ 0x00,0x00,0x00,0x30,0x78,0xCC,0xCC,0xFC,0xCC,0xCC },{ 0x00,0x00,0x00,0xFC,0x66,0x66,0x7C,0x66,0x66,0xFC },{ 0x00,0x00,0x00,0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C },{ 0x00,0x00,0x00,0xF8,0x6C,0x66,0x66,0x66,0x6C,0xF8 },{ 0x00,0x00,0x00,0xFE,0x62,0x68,0x78,0x68,0x62,0xFE },{ 0x00,0x00,0x00,0xFE,0x62,0x68,0x78,0x68,0x60,0xF0 },{ 0x00,0x00,0x00,0x3C,0x66,0xC0,0xC0,0xCE,0x66,0x3E },{ 0x00,0x00,0x00,0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC },{ 0x00,0x00,0x00,0x78,0x30,0x30,0x30,0x30,0x30,0x78 },{ 0x00,0x00,0x00,0x1E,0x0C,0x0C,0x0C,0xCC,0xCC,0x78 },{ 0x00,0x00,0x00,0xE6,0x66,0x6C,0x78,0x6C,0x66,0xE6 },{ 0x00,0x00,0x00,0xF0,0x60,0x60,0x60,0x62,0x66,0xFE },{ 0x00,0x00,0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6 },{ 0x00,0x00,0x00,0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6 },{ 0x00,0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x38 },{ 0x00,0x00,0x00,0xFC,0x66,0x66,0x7C,0x60,0x60,0xF0 },{ 0x00,0x00,0x00,0x78,0xCC,0xCC,0xCC,0xDC,0x78,0x1C },{ 0x00,0x00,0x00,0xFC,0x66,0x66,0x7C,0x6C,0x66,0xE6 },{ 0x00,0x00,0x00,0x78,0xCC,0xE0,0x70,0x1C,0xCC,0x78 },{ 0x00,0x00,0x00,0xFC,0xB4,0x30,0x30,0x30,0x30,0x78 },{ 0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xFC },{ 0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x30 },{ 0x00,0x00,0x00,0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6 },{ 0x00,0x00,0x00,0xC6,0xC6,0x6C,0x38,0x38,0x6C,0xC6 },{ 0x00,0x00,0x00,0xCC,0xCC,0xCC,0x78,0x30,0x30,0x78 },{ 0x00,0x00,0x00,0xFE,0xC6,0x8C,0x18,0x32,0x66,0xFE },{ 0x00,0x00,0x00,0x78,0x60,0x60,0x60,0x60,0x60,0x78 },{ 0x00,0x00,0x00,0xC0,0x60,0x30,0x18,0x0C,0x06,0x02 },{ 0x00,0x00,0x00,0x78,0x18,0x18,0x18,0x18,0x18,0x78 },{ 0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x30,0x30,0x18,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,0xCC,0x76 },{ 0x00,0x00,0x00,0xE0,0x60,0x60,0x7C,0x66,0x66,0xDC },{ 0x00,0x00,0x00,0x00,0x00,0x78,0xCC,0xC0,0xCC,0x78 },{ 0x00,0x00,0x00,0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,0x76 },{ 0x00,0x00,0x00,0x00,0x00,0x78,0xCC,0xFC,0xC0,0x78 },{ 0x00,0x00,0x00,0x38,0x6C,0x60,0xF0,0x60,0x60,0xF0 },{ 0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C },{ 0x00,0x00,0x00,0xE0,0x60,0x6C,0x76,0x66,0x66,0xE6 },{ 0x00,0x00,0x00,0x30,0x00,0x70,0x30,0x30,0x30,0x78 },{ 0x00,0x00,0x00,0x0C,0x00,0x0C,0x0C,0x0C,0xCC,0xCC },{ 0x00,0x00,0x00,0xE0,0x60,0x66,0x6C,0x78,0x6C,0xE6 },{ 0x00,0x00,0x00,0x70,0x30,0x30,0x30,0x30,0x30,0x78 },{ 0x00,0x00,0x00,0x00,0x00,0xCC,0xFE,0xFE,0xD6,0xC6 },{ 0x00,0x00,0x00,0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xCC },{ 0x00,0x00,0x00,0x00,0x00,0x78,0xCC,0xCC,0xCC,0x78 },{ 0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x7C,0x60 },{ 0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C },{ 0x00,0x00,0x00,0x00,0x00,0xDC,0x76,0x66,0x60,0xF0 },{ 0x00,0x00,0x00,0x00,0x00,0x7C,0xC0,0x78,0x0C,0xF8 },{ 0x00,0x00,0x00,0x10,0x30,0x7C,0x30,0x30,0x34,0x18 },{ 0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0x76 },{ 0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0x78,0x30 },{ 0x00,0x00,0x00,0x00,0x00,0xC6,0xD6,0xFE,0xFE,0x6C },{ 0x00,0x00,0x00,0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6 },{ 0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0x7C,0x0C },{ 0x00,0x00,0x00,0x00,0x00,0xFC,0x98,0x30,0x64,0xFC },{ 0x00,0x00,0x00,0x1C,0x30,0x30,0xE0,0x30,0x30,0x1C },{ 0x00,0x00,0x00,0x18,0x18,0x18,0x00,0x18,0x18,0x18 },{ 0x00,0x00,0x00,0xE0,0x30,0x30,0x1C,0x30,0x30,0xE0 },{ 0x00,0x00,0x00,0x76,0xDC,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE },{0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}
};


void setupPins() {
    // Disable the receiver and transmitter
    UCSR0B &= ~( (1 << RXEN0) | (1 << TXEN0) );

    // Disable RX and TX interrupts
    UCSR0B &= ~( (1 << RXCIE0) | (1 << TXCIE0) );

    // Set pins as outputs
    DDRB |= (1 << PB0);  // Vsync
    DDRB |= (1 << PB1);  // Hsync (Timer1 - Port B) 
    DDRB |= (1 << PB2);  // Data (PB2)
    DDRB |= (1 << PB3);  // DOT Clock (Timer2 - Port B)
    DDRB |= (1 << PB4);  // Parallel load (PB4) (74LS165)

    PORTB &= ~(1 << PB4); // Set parallel load LOW (Parallel Entry)
    DDRD = 0xFF; // Set all port D pins to output
}

void setupTimers() {
    // Disable Timer0
    TCCR0B = 0;
    TIMSK0 &= ~(1 << TOIE0);  // Disable Timer0 overflow interrupt

    // Disable Timer2
    TCCR2B = 0;
    TIMSK2 &= ~(1 << TOIE2);  // Disable Timer2 overflow interrupt

    // Initialize Timer1 (Count up to 865, reset to 0 and start interrupt)
    TCCR1A = 0;                 // Set Timer1 Control Register A to 0
    TCCR1B = (1 << WGM12);      // Set WGM12 to enable CTC mode
    TCCR1B |= (1 << CS10);      // Set prescaler to 1 (no prescaling)
    OCR1A = 865;                // Set Timer1 Compare Match A Register
    TIMSK1 |= (1 << OCIE1A);    // Enable Timer1 Compare Match A interrupt

    // Configure Timer2 for Fast PWM mode
    TCCR2A = (1 << COM2A0) | (1 << WGM21) | (1 << WGM20); // Fast PWM, toggle OC2A
    TCCR2B = (1 << WGM22) | (1 << CS20); // No prescaler, timer running at 16 MHz
    OCR2A = 0; // Set Timer2 Compare Match A Register
}

void uint8_to_hex_ascii(uint8_t value, char *hex_str) {
    // Convert high nibble to ASCII
    hex_str[0] = (value >> 4) + '0';  // Convert high nibble (4 bits) to ASCII
    if (hex_str[0] > '9') hex_str[0] += 'A' - '9' - 1; // Convert to 'A' to 'F'

    // Convert low nibble to ASCII
    hex_str[1] = (value & 0x0F) + '0';  // Convert low nibble (4 bits) to ASCII
    if (hex_str[1] > '9') hex_str[1] += 'A' - '9' - 1; // Convert to 'A' to 'F'
}

int main()
{
    setupTimers();
    setupPins();
    sei(); // Enable global interrupts

    uint8_t dot_column = 0;
    uint8_t dot_column_old = 0;
    uint8_t dot_row = 0;

    // By having an empy while loop we can exit fast, otherwise we might be delayed by one or two cycles
    // we also only run during the retrace, that gives us more more time
    while (1) {
        while (!run) {}
        char hex_str[2];
        uint8_to_hex_ascii(int_time, hex_str);

        memory[15][8] = hex_str[0];
        memory[15][9] = hex_str[1];

        memory[dot_row][dot_column] = '*';
        NopDelay<100>();
        memory[dot_row][dot_column_old] = ' ';

        dot_column_old = dot_column;
        dot_column++;

        if (dot_column > 19) {
            dot_column_old = dot_column;
            dot_column = 0;
            dot_row++;
        }

        if (dot_row > 19) {
            dot_row = 0;
        }
        run = false;
    }
    return 0;
}


// ISR(TIMER1_COMPA_vect) __attribute__((interrupt)) __attribute__((naked));

// ISR(TIMER1_COMPA_vect) {
//     // Save the necessary registers
//     asm volatile (
//         "PUSH R24\n"  // Save register R24
//         "PUSH R25\n"  // Save register R25
//         NOP_3
//     );

//     OCR1A += 865; // Advance The COMPA Register
//     PORTB |= (1 << PB1); // Turn on the pulse
//     NopDelay<50>();
//     PORTB &= ~(1 << PB1); // Turn off the pulse

//     // Restore the saved registers
//     asm volatile (
//         "POP R25\n"   // Restore register R25
//         "POP R24\n"   // Restore register R24
//         // Other register restores if needed
//         "RETI\n"      // Return from interrupt
//     );
// }


ISR(TIMER1_COMPA_vect) {
    // Look at TCNT1H and TCNT1L
    int_time = TCNT1L;
    while (TCNT1L >= 0x32) {};

    // asm volatile (
    //     "ldi r27, 0x00\n"
    //     "ldi r26, 0x84\n"
    //     "ld r5, X\n"
    //     :
    //     :
    //     : "r16", "r5", "r26", "r27" // Clobbered registers
    // );

    // asm volatile (
    //     "ldi r27, 0x00\n"
    //     "ldi r26, 0x84\n"
    //     "ldi r16, 0x80\n"
    //     "syncWait:\n"
    //     "ld r5, X\n"
    //     "cpse r16, r5\n"
    //     "rjmp syncWait\n"
    //     :
    //     :
    //     : "r16", "r5", "r26", "r27" // Clobbered registers
    // );

    

    PORTB |= (1 << PB1); // Turn on the pulse
    if (row == 0) {
        PORTB &= ~(1 << PB0); // Start VSYNC (active low)
    }

    if (row == VSYNC_ROWS) {
        PORTB |= (1 << PB0);  // End VSYNC (inactive high)
    }

    NopDelay<50>();
    PORTB &= ~(1 << PB1); // Turn off the pulse


    // Delay for row re-trace (has to be just right)
    // Note this delay could be replaced with some other slow action
    NopDelay<55>();

    if (character_row > TEXT_ROW_START && character_row < TEXT_ROW_END) {
        const char line = character_row - (TEXT_ROW_START + 1);                 // VAR
        const unsigned char* text_row = *(memory + line);                      // VAR

            for (unsigned char i = 0; i < TEXT_COLUMNS; i++) {
            const unsigned char char_i = *(text_row + i) - 32;                  // VAR
            const unsigned char* pixel_data = *(FONT + char_i);                 // VAR
            const unsigned char* offset = pixel_data + font_row;                // VAR

            PORTD = *offset; 
            PORTB &= ~bitMask; // Set LOW
            PORTB |= bitMask; // Set HIGH 
        }
    } else {
        run = true;
    }


    // font_row is 9 then we are at the end of the char line
    if (font_row > 8 || row > SCREEN_END) {
        character_row++;
        font_row = 0;
    } else {
        NopDelay<1>();
        font_row++;
    }

    if (character_row > TEXT_ROWS + 1 || row > SCREEN_END) {
        character_row = 0;
    } else {
        NopDelay<1>();
    }

    // Reset row counter
    if (row > SCREEN_END) {
        row = 0;
    } else {
        row++;
    }
}